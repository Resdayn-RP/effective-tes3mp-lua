{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Foreword","text":"<p>This is an attempt to standardise the strategies and styles for writing Lua code. By attempting to standardise these strategies/styles, we gain the clean and efficient code that can be easier for people to read and debug.</p> <p>I would personally like to thank Manason, who did the same thing for the FiveM community and what this handbook is based on.</p> <p>https://manason.github.io/effective-fivem-lua/</p> <p>- Yvan (Hebi)</p>"},{"location":"conditionals/","title":"Conditionals","text":""},{"location":"conditionals/#default-values","title":"Default Values","text":"<p>Smart use of the 'or' operator instead of nil checks increases readability. BAD<pre><code>    if name then\nreturn name\nelse\nreturn \"John Doe\"\nend\n</code></pre> GOOD<pre><code>    return name or \"John Doe\"\n</code></pre></p>"},{"location":"conditionals/#dont-write-if-true-then-return-true","title":"Don't write \"if true then return true\"","text":"<p>Just use ternary operators to evaluate the expression BAD<pre><code>    if name == \"mark\" or name == \"stacy\"\nreturn true\nelse\nreturn false\nend\n</code></pre> GOOD<pre><code>    return name == \"mark\" or name == \"stacy\" -- Will return true if name is either mark or stacy\n</code></pre></p>"},{"location":"events/","title":"Events","text":"<p>Thanks to the TES3MP team for providing this eventHooks documentation, I find just hosting it here is likely to be more helpful than rewriting it. </p>"},{"location":"events/#using-the-customeventhooks-api","title":"Using the customEventHooks API:","text":""},{"location":"events/#handling-events","title":"Handling events:","text":"<p>To handle various events you will need to use two functions: <code>customEventHooks.registerValidator</code> and <code>customEventHooks.registerHandler</code>. Validators are called before any default logic for the event is executed, Handlers are called after such (whether default behaviour was peformed or not). </p> <p>Both of these functions accept an event string (you can find a table below) and a callback function as their arguments. The callback function will be called with a guaranteed argument of eventStatus and a few arguments (potentially none) depending on the particular event.</p> <p>eventStatus is a table that defines the way handlers should behave. It has two fields: <code>validDefaultHandler</code> and <code>validCustomHandlers</code>. By default both of these are <code>true</code>. First defines if default behaviour should be performed, the second signals custom handlers that they should not run. However, their callbacks are still ran, and it is scripts' responsibility to handle <code>eventStatus.validCustomHandlers</code> being <code>false</code>.</p> <p>Validators can change the current eventStatus. If your validators returns nothing, it stays the same, however if you return a non-<code>nil</code> value for either of the two fields, it will override the previous one. You can use <code>customEventHooks.makeEventStatus(validDefaultHandler, validCustomHandlers)</code> for this.</p>"},{"location":"events/#examples","title":"Examples:","text":"<p>Imagine you want to taunt a player whenever they die.</p> <pre><code>customEventHooks.registerHandler(\"OnPlayerDeath\", function(eventStatus, pid)\nif eventStatus.validCustomHandlers then --check if some other script made this event obsolete\ntes3mp.SendMessage(pid, \"Don't worry, he'll be gentle!\\n\")\nend\nend)\n</code></pre> <p>Now let's do something more practical: limiting players' level:</p> <pre><code>local maxLevel = 20\ncustomEventHooks.registerValidator(\"OnPlayerLevel\", function(eventStatus, pid)\nlocal player = Players[pid]\nif player.data.stats.level &gt;= maxLevel then\nplayer.data.stats.level = maxLevel\nplayer.data.stats.levelProgress = 0\nplayer:LoadLevel()\n--cancel the level increase on the server side\n--there have been no level up anymore, so don't run custom handlers for it either\nreturn customEventHooks.makeEventStatus(false,false) \nend\nend)\n</code></pre>"},{"location":"events/#custom-events","title":"Custom events","text":"<p>You can also use this API to allow other scripts to interact with yours. For that you will need to add <code>customEventHooks.triggerValidators(event, args)</code> and <code>customEventHooks.triggerHandlers(event, eventStatus, args)</code> to your code. <code>event</code> is a string labeling the event, <code>eventStatus</code> should be whatever was returned by <code>triggerValidators</code> and <code>args</code> is a list or arguments relevant callbacks will receive.</p> <p>Here's an example from <code>eventHandler.lua</code>: <pre><code>local eventStatus = customEventHooks.triggerValidators(\"OnPlayerLevel\", {pid})\nif eventStatus.validDefaultHandler then\nPlayers[pid]:SaveLevel()\nPlayers[pid]:SaveStatsDynamic()\nend\ncustomEventHooks.triggerHandlers(\"OnPlayerLevel\", eventStatus, {pid})\n</code></pre></p> <p>If you don't want other scripts replacing logic from yours, you can provide just the handlers: <pre><code>customEventHooks.triggerHandlers(\"OnServerExit\", customEventHooks.makeEventStatus(true, true), {})\n</code></pre></p>"},{"location":"events/#using-the-customcommandhooks-api","title":"Using the customCommandHooks API:","text":"<p>To add a command, simply run <code>customCommandHooks.registerCommand(cmd, callback)</code>. Here <code>cmd</code> is the word after <code>/</code> which you want to trigger your command (e.g. \"help\" for <code>/help</code>) and callback is a function which will be ran when someone sends a message starting with \"/\" and <code>cmd</code>.</p> <p>Callback will receive as its arguments a player's <code>pid</code> and an array of all command parts (their message is split into parts by spaces, after removing the leading '/', same as in the old <code>commandHandler.lua</code>).</p> <p>You can then perform staff rank checks by calling <code>Players[pid]:IsAdmin()</code> etc.</p>"},{"location":"events/#event-table","title":"Event table","text":"<p>This table will follow this format: <code>event(args)</code>, where <code>event</code> and <code>args</code> are as described in Using the customEventHooks API:</p> <p>Most of the events are the same as <code>eventHandler.lua</code> functions, with some extra arguments:</p> <ul> <li>OnPlayerConnect(pid)</li> <li>OnPlayerDisconnect(pid)</li> <li>OnGUIAction(pid, idGui, data)</li> <li>OnPlayerSendMessage(pid, message)</li> <li>OnPlayerDeath(pid)</li> <li>OnDeathTimeExpiration(pid)</li> <li>OnPlayerAttribute(pid)</li> <li>OnPlayerSkill(pid)</li> <li>OnPlayerLevel(pid)</li> <li>OnPlayerShapeshift(pid)</li> <li>OnPlayerCellChange(pid)</li> <li>OnPlayerEndCharGen(pid)</li> <li>OnPlayerEquipment(pid)</li> <li>OnPlayerInventory(pid)</li> <li>OnPlayerSpellbook(pid)</li> <li>OnPlayerQuickKeys(pid)</li> <li>OnPlayerJournal(pid)</li> <li>OnPlayerFaction(pid, action)     <code>action</code> is the result of <code>tes3mp.GetFactionChangesAction(pid)</code> (0 for RANK, 1 for EXPULSION, 2 for REPUTATION)</li> <li>OnPlayerTopic(pid)</li> <li>OnPlayerBounty(pid)</li> <li>OnPlayerReputation(pid)</li> <li>OnPlayerBook(pid)</li> <li>OnPlayerItemUse(pid, itemRefId)</li> <li>OnPlayerMiscellaneous(pid)</li> <li>OnCellLoad(pid, cellDescription)</li> <li>OnCellUnload(pid, cellDescription)</li> <li>OnCellDeletion(cellDescription)</li> <li>OnActorList(pid, cellDescription)</li> <li>OnActorEquipment(pid, cellDescription)</li> <li>OnActorAI(pid, cellDescription)</li> <li>OnActorDeath(pid, cellDescription)</li> <li>OnActorCellChange(pid, cellDescription)</li> <li> <p>OnObjectActivate(pid, cellDescription, objects, players)     <code>objects</code> and <code>players</code> container lists of activated objects and players respectively.</p> <p><code>objects</code> elements have form <code>{     uniqueIndex = ...,     refId = ... }</code></p> <p><code>players</code> elements have form <code>{     pid = ... }</code> * OnObjectPlace(pid, cellDescription, objects) <code>objects</code> has the same structure as in <code>OnObjectActivate</code> * OnObjectSpawn(pid, cellDescription, objects) <code>objects</code> has the same structure as in <code>OnObjectActivate</code> * OnObjectDelete(pid, cellDescription, objects) <code>objects</code> has the same structure as in <code>OnObjectActivate</code> * OnObjectLock(pid, cellDescription, objects) <code>objects</code> has the same structure as in <code>OnObjectActivate</code> * OnObjectTrap(pid, cellDescription, objects) <code>objects</code> has the same structure as in <code>OnObjectActivate</code> * OnObjectScale(pid, cellDescription, objects) <code>objects</code> has the same structure as in <code>OnObjectActivate</code> * OnObjectState(pid, cellDescription, objects) <code>objects</code> has the same structure as in <code>OnObjectActivate</code> * OnDoorState(pid, cellDescription, objects) <code>objects</code> has the same structure as in <code>OnObjectActivate</code> * OnContainer(pid, cellDescription, objects) <code>objects</code> has the same structure as in <code>OnObjectActivate</code> * OnVideoPlay(pid, videos) <code>videos</code> is a list of video filenames  * OnRecordDynamic(pid) * OnWorldKillCount(pid) * OnWorldMap(pid) * OnWorldWeather(pid) * OnObjectLoopTimeExpiration(pid, loopIndex) <code>pid</code> is the loop's <code>targetPid</code></p> </li> </ul> <p>There are also some events not present in <code>eventHandler</code> before:</p> <ul> <li>OnServerInit()</li> <li>OnServerPostInit()</li> <li>OnServerExit()    Only has a handler trigger and no default behaviour to cancel.</li> <li>OnLoginTimeExpiration(pid)</li> <li>OnPlayerResurrect(pid)     Only has a handler trigger and no default behaviour to cancel.</li> <li>OnPlayerFinishLogin(pid)     Only has a handler trigger and no default behaviour to cancel.</li> <li> <p>OnPlayerAuthentified(pid)     Only has a handler trigger and no default behaviour to cancel.</p> <p>Is triggered after a player has finished login it, whether it was by making a new character (<code>OnPlayerEndCharGen</code>) or by logging in (<code>OnPlayerFinishLogin</code>)</p> </li> </ul>"},{"location":"functions/","title":"Functions","text":""},{"location":"functions/#size-scope","title":"Size &amp; Scope","text":"<ul> <li>Functions should remain small and do a singular task</li> <li>Functions shouldn't really exceed 10 lines, if it is, you are likely doing more than one thing</li> <li>Utility functions should be in their own file, and then the use of <code>require</code> to call them into the main script.</li> </ul>"},{"location":"functions/#example","title":"Example","text":"functions.lua<pre><code>    ---@class functions\nlocal functions = {} \n---@param message string\nfunction functions.log(message)\ntes3mp.LogMessage(enumerations.log.VERBOSE, message)\nend\nreturn functions\n</code></pre> main.lua<pre><code>    ---@class core\nlocal core = {}\ncore.functions = require 'custom.example.functions'\nfunction core.onServerPostInit()\ncore.functions.log(\"Hello World!\")\nend\ncustomEventHooks.registerHandler(\"onServerPostInit\", core.onServerPostInit)\nreturn core\n</code></pre>"},{"location":"functions/#naming","title":"Naming","text":"<ul> <li>Local functions should only be in camelCase, while global functions should be in PascalCase</li> <li>Function names should start with a leading verb.</li> </ul>"},{"location":"functions/#example_1","title":"Example","text":"<p>BAD<pre><code>    function player() -- global\nlocal function PlayerDrop() -- local\n</code></pre> GOOD<pre><code>    function GetPlayerObject() -- global\nlocal function dropPlayer() -- local\n</code></pre></p>"},{"location":"functions/#parameters","title":"Parameters","text":""},{"location":"functions/#parameter-count","title":"Parameter Count","text":"<p>Never exceed 3 parameters, doing so means that you should probably create a table and then pass the table as an argument.</p>"},{"location":"functions/#example_2","title":"Example","text":"BAD<pre><code>    function CreateChar(name, age, height, birthday, nationality)\nend\n</code></pre> GOOD<pre><code>    function CreateChar(char)\nend\n</code></pre>"},{"location":"functions/#avoid-passing-implied-functions-as-arguments","title":"Avoid passing implied functions as arguments","text":"<p>Just declare the function as a local variable and then pass the variable as the argument This benefits performance (especially when coroutines/threads are used). Beyond that, it will also increase said readability of the code. BAD<pre><code>    customEventHooks.registerHandler(\"onServerInit\", function()\nprint(\"Hello\")\nend)\n</code></pre> GOOD<pre><code>    local core = {}\ncore.onServerInit = function()\nprint(\"Hello\")\nend\ncustomEventHooks.registerHandler(\"onServerInit\", core.onServerInit)\n</code></pre></p>"},{"location":"functions/#documentation","title":"Documentation","text":"<p>Always use lua-language-server annotation, this not only helps you remember the structure and how your code works, it provides an API so that you can see it when you call functions in other files. <pre><code>    --- Puts a space between a first and last name\n---@param first string first name\n---@param last string last name\n---@return string full name\nfunction core.formatName(first, last)\nreturn first .. ' ' .. last\nend\n</code></pre></p>"},{"location":"functions/#nesting","title":"Nesting","text":"<p>Never nest if possible. Do not exceed 4 levels of indentation. Use guard clauses where applicable. Nesting code makes the code dificult to read, it also makes it seem as if it is doing multiple things. </p> BAD<pre><code>    function core.getFullName(first, last)\nif first and last then\nreturn first .. last\nelse\nreturn nil\nend\nend\n</code></pre> GOOD<pre><code>    function core.getFullName(first, last)\nif not (first and last) then return end\nreturn first .. last\nend\n</code></pre>"},{"location":"structure/","title":"Structure/Scope","text":""},{"location":"structure/#limited-scope","title":"Limited Scope","text":"<p>Variables and functions should be scoped to the smallest visibility needed. Prefer in order: local, global, export.</p>"},{"location":"structure/#example","title":"Example","text":"<p>If you need the variable for one function, you declare the variable local within the function.</p>"},{"location":"structure/#resourcescript-naming","title":"Resource/Script Naming","text":"<p>Never use spaces, \"_\" and \"-\" are acceptable alternatives. You may also chose to do camelCase as well.</p>"},{"location":"structure/#indentation","title":"Indentation","text":"<p>You should not exceed 4 levels of indentation if you can avoid it. Any more impacts the readability of code. Effective use of guard functions will be necessary to cut down on this.</p>"},{"location":"tables/","title":"Tables","text":""},{"location":"tables/#use-object-access-for-constant-keys-array-access-for-non-constant","title":"Use object access for constant keys, array access for non-constant","text":"<p><pre><code>    local company = {\nboss = \"Sam\"\n}\n</code></pre> BAD<pre><code>    local boss = company[\"boss\"]\n</code></pre> GOOD<pre><code>    local boss = company.boss\n</code></pre></p>"},{"location":"tables/#when-using-table-values-multiple-times-store-it-in-a-local-variable","title":"When using table values multiple times, store it in a local variable","text":"<p>This increases readability, but also increases performance as you are not accessing the table constantly. BAD<pre><code>    local concatenation = myTable[\"key\"] .. myTable[\"key\"]\n</code></pre> GOOD<pre><code>    local myTableValue = myTable[\"key\"]\nlocal concatenation = myTableValue .. myTableValue\n</code></pre></p>"},{"location":"tables/#tableinsert-sucks","title":"table.insert() sucks","text":"<p>It is not efficient/performant, you should only use this when you need to insert at a specific index.</p>"},{"location":"tables/#inserting-at-the-end-of-a-table","title":"Inserting at the end of a table","text":"<p>BAD<pre><code>    table.insert(myTable, \"value\")\n</code></pre> GOOD<pre><code>    myTable[#myTable + 1] = \"value\"\n</code></pre></p>"},{"location":"tables/#insertingoverwriting-a-given-key","title":"Inserting/Overwriting a given key","text":"<p>BAD<pre><code>    table.insert(myTable, \"key\", \"value\")\n</code></pre> GOOD<pre><code>    myTable[\"key\"] = \"value\"\n</code></pre></p>"},{"location":"variables/","title":"Variables","text":""},{"location":"variables/#naming","title":"Naming","text":""},{"location":"variables/#name-constants-using-all_caps","title":"Name Constants using ALL_CAPS","text":"<p>Variables that you do not intend to change (a constant), should follow the following naming scheme. <pre><code>    local MY_CONSTANT = \"constant value\"\nMY_GLOBAL_CONSTANT = \"another constant value\"\n</code></pre></p>"},{"location":"variables/#camelcase-for-non-constant-local-variables","title":"camelCase for non-constant local variables","text":"<pre><code>    local myVariable = \"variable value\"\n</code></pre>"},{"location":"variables/#pascalcase-non-constant-global-variables","title":"PascalCase non-constant global variables","text":"<pre><code>    MyGlobalVariable = \"global variable value\"\n</code></pre>"},{"location":"variables/#use-underscore-_-as-the-name-of-a-variable-that-cannot-be-deleted-but-is-unused","title":"Use underscore \"_\" as the name of a variable that cannot be deleted, but is unused","text":"<pre><code>    local function printValues(map)\nfor _, v in pairs(map) do\nprint(v)\nend\nend\n</code></pre>"},{"location":"variables/#location","title":"Location","text":"<p>Always keep variables close to where they are used and grouped together. Global variables should be grouped together and declared at the top of a file (or in a seperate file).</p>"}]}